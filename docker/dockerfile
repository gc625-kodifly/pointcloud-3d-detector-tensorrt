# Use NVIDIA CUDA 11.0.3 with cuDNN 8 runtime base image
FROM nvcr.io/nvidia/cuda:11.0.3-cudnn8-devel-ubuntu20.04

# Set non-interactive installation mode
ENV DEBIAN_FRONTEND=noninteractive

# Install necessary packages
RUN apt-get update && apt-get install -y \
    wget \
    build-essential \
    curl \
    libpcl-dev \
    libcurl4-openssl-dev \
    libssl-dev \
    libfreetype6-dev \
    libpng-dev \
    libzmq3-dev \
    pkg-config \
    python3-pip \
    python3-dev \
    git \
    vim && \
    ros-noetic-ros-numpy \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Upgrade pip
RUN python3 -m pip install --upgrade pip

RUN pip3 install cmake

# Install ROS Noetic

RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' && \
    curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - && \
    apt update && \
    apt install -y ros-noetic-desktop-full && \
    echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc && \
    apt install -y python3-rosdep && \
    rosdep init && \
    rosdep update


# Install PyTorch, TorchVision, and Torchaudio with CUDA 11.0 support
RUN pip install torch==1.7.1+cu110 torchvision==0.8.2+cu110 torchaudio==0.7.2 \
    -f https://download.pytorch.org/whl/torch_stable.html

# Install TensorRT, check the compatibility and version

COPY ./tensorrt.tar.gz /tmp

# untar and add dir to LD_LIBRARY_PATH
RUN tar -xvzf /tmp/tensorrt.tar.gz -C /tmp 
    
ARG USERNAME=admin

# Create a non-root user and set up the environment
RUN useradd ${USERNAME} --create-home --shell /bin/bash  && \
    echo ${USERNAME}':newpassword' | chpasswd && \
    chown -R ${USERNAME}:${USERNAME} /home/${USERNAME} && \
    chmod 777 /home/${USERNAME}

# Update 'admin' user
RUN echo ${USERNAME} ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/${USERNAME} \
    && chmod 0440 /etc/sudoers.d/${USERNAME} \
    && adduser ${USERNAME} video && adduser ${USERNAME} plugdev && adduser ${USERNAME} sudo


# SSH stuff for git
RUN mkdir -p /home/${USERNAME}/.ssh && chmod 777 /home/${USERNAME}/.ssh

RUN --mount=type=secret,target=/run/secrets/host_ssh_key\
    cp /run/secrets/host_ssh_key /home/${USERNAME}/.ssh/id_rsa

RUN chown ${USERNAME}:${USERNAME} /home/${USERNAME}/.ssh/id_rsa
RUN ssh-keyscan github.com >> /home/${USERNAME}/.ssh/known_hosts



# switch to the new user

SHELL ["/bin/bash", "-c"]
USER ${USERNAME}
WORKDIR /home/${USERNAME}/workspace


# Reset non-interactive environment variable
ENV TENSORRT_DIR=/tmp/TensorRT-8.4.1.5
ENV CUDNN_DIR=/usr/lib/x86_64-linux-gnu

RUN echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc
RUN echo "source ~/workspace/devel/setup.bash" >> ~/.bashrc
RUN echo "export LD_LIBRARY_PATH=:/tmp/TensorRT-8.4.1.5/lib:$LD_LIBRARY_PATH" >> ~/.bashrc

# Command to run on container start
CMD ["/bin/bash"]
